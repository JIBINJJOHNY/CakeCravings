# Generated by Django 4.2.7 on 2023-12-03 16:55

import cloudinary.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Format: required, max_length=100', max_length=100, unique=True, verbose_name='Category Name')),
                ('slug', models.SlugField(help_text='Format: required, max_length=150', max_length=150, unique=True, verbose_name='Category Slug')),
                ('is_active', models.BooleanField(default=False)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.PositiveIntegerField(help_text='Discount percentage')),
                ('start_date', models.DateField(help_text='Start date of the discount')),
                ('end_date', models.DateField(help_text='End date of the discount')),
                ('is_active', models.BooleanField(default=True, help_text='Is the discount currently active?')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('slug', models.SlugField(max_length=150, unique=True)),
                ('description', models.TextField(max_length=500)),
                ('ingredients', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('availability', models.CharField(choices=[('out_of_stock', 'Out of Stock'), ('upcoming', 'Upcoming'), ('in_stock', 'In Stock')], default='in_stock', max_length=20)),
                ('size', models.CharField(blank=True, choices=[('S', 'Small (18cm - 6 portions)'), ('M', 'Medium (26cm - 12 portions)'), ('L', 'Large (36cm - 25 portions)')], max_length=5, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.category')),
                ('discount_price', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.discount')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the tag (e.g., "Offer 10%", "New", "International Shipping").', max_length=100, unique=True, verbose_name='Tag Name')),
                ('slug', models.SlugField(help_text='A slugified version of the tag name (e.g., "offer-10", "new", "international-shipping").', max_length=150, unique=True, verbose_name='Tag Slug')),
                ('is_active', models.BooleanField(default=False, help_text='Is this tag currently active and displayed on the website?', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this tag was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this tag was last updated.', verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('alt_text', models.CharField(blank=True, help_text='Descriptive text for the image.', max_length=300, null=True, verbose_name='Alt text')),
                ('default_image', models.BooleanField(default=False, help_text='Is this the default image for the product?', verbose_name='Default Image')),
                ('is_active', models.BooleanField(default=False, help_text='Is this image currently active?', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this image was created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when this image was last updated.', verbose_name='Updated at')),
                ('product', models.ForeignKey(help_text='The associated product for this image.', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['product'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='products', to='products.tag'),
        ),
    ]
